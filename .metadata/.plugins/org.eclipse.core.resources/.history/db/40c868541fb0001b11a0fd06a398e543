package introduction;

@FunctionalInterface
interface Cab{ // When an interface will have exactly 1 abstract method we can say it as a Functional interface.
	void bookCab(); // -> by default public abstract void bookCab();
}
/* class UberX implements Cab{
   public void bookCab(){
   System.out.println("UberX Booked!! Arriving soon!!");
   }
  }
 */
public class LambdaExpressions {
	public static void main(String[] args) {
		
		// 1.
		//Cab cab = new UberX();  //Polymorphic Statement
		//cab.bookCab();

	    // 2.
	    // Anonymous Class Implementation
		/* Cab cab = new cab(){
		    @override
		    public void bookCab(){
		    System.out.println("UberX Booked!! Arriving soon!!");
		    }
		  };
		  cab.bookCab();*/  
		// 3.
		//Using Lambda Expression -> Functional Interfaces
		Cab cab = ()->{
			System.out.println("UberX Booked!! Arriving soon!!");
		};
		cab.bookCab();
		
	}    

}
